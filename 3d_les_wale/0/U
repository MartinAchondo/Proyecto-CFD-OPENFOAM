/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    inlet
    {
        type            turbulentInlet;
        referenceField  #codeStream
        {
            codeInclude
            #{
                #include    "fvCFD.H"
            #};

            codeOptions
            #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude
            #};

            codeLibs
            #{
                -lmeshTools \
                -lfiniteVolume
            #};

            code
            #{
                const scalar U_inlet = 0.03500000000000002;
                const scalar H = 0.05;
                const scalar w = 0.2;

                const IOdictionary& d = static_cast<const IOdictionary&>
                (
                dict.parent().parent()
                );
                const fvMesh& mesh = refCast<const fvMesh>(d.db());
                const label id = mesh.boundary().findPatchID("inlet");
                const fvPatch& patch = mesh.boundary()[id];
                
                vectorField U(patch.size(), vector(0, 0, 0));

                scalar varphi = 0;
                scalar sum = 0;
                scalar beta = 0;
                scalar r = 0;
                const scalar pi_ = 3.14159265358;

                for (int j=0; j<20; j++)
                {   
                    sum = 192/(pow(2*j+1,5)*pow(pi_,5))*(H/w)*tanh(((2*j+1)*pi_*w)/(2*H));
                    varphi = varphi + sum;
                }
                varphi = 1 - varphi;

                forAll(U, i) //equivalent to for (int i=0; patch.size()<i; i++)
                {
                    const scalar y = patch.Cf()[i][1] - 3*H;
                    const scalar z = patch.Cf()[i][2] - w;
                    beta = 0;

                    for (int n=0; n<20; n++)
                    {
                        r = (2*n+1)*pi_/(2*H);
                        sum = pow(-1,n)/pow(2*n+1,3)*cos(r*y)*(1-cosh(r*z)/cosh(r*w));
                        beta = beta + sum;
                    }

                    U[i] = vector(12*U_inlet*beta/(pow(pi_,3)*varphi), 0., 0.);
                    //U[i] = vector(6*U_inlet*(y*(H-y))/(H*H), 0., 0.);
                }
                
                writeEntry(os, "", U);
                
            #};
        };
        fluctuationScale (0.002 0.001 0.001);
        value           #codeStream
        {
            codeInclude
            #{
                #include    "fvCFD.H"
            #};

            codeOptions
            #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude
            #};

            codeLibs
            #{
                -lmeshTools \
                -lfiniteVolume
            #};

            code
            #{
                const scalar U_inlet = 0.03500000000000002;
                const scalar H = 0.05;
                const scalar w = 0.2;

                const IOdictionary& d = static_cast<const IOdictionary&>
                (
                dict.parent().parent()
                );
                const fvMesh& mesh = refCast<const fvMesh>(d.db());
                const label id = mesh.boundary().findPatchID("inlet");
                const fvPatch& patch = mesh.boundary()[id];
                
                vectorField U(patch.size(), vector(0, 0, 0));

                scalar varphi = 0;
                scalar sum = 0;
                scalar beta = 0;
                scalar r = 0;
                const scalar pi_ = 3.14159265358;

                for (int j=0; j<20; j++)
                {   
                    sum = 192/(pow(2*j+1,5)*pow(pi_,5))*(H/w)*tanh(((2*j+1)*pi_*w)/(2*H));
                    varphi = varphi + sum;
                }
                varphi = 1 - varphi;

                forAll(U, i) //equivalent to for (int i=0; patch.size()<i; i++)
                {
                    const scalar y = patch.Cf()[i][1] - 3*H;
                    const scalar z = patch.Cf()[i][2] - w;
                    beta = 0;

                    for (int n=0; n<20; n++)
                    {
                        r = (2*n+1)*pi_/(2*H);
                        sum = pow(-1,n)/pow(2*n+1,3)*cos(r*y)*(1-cosh(r*z)/cosh(r*w));
                        beta = beta + sum;
                    }

                    U[i] = vector(12*U_inlet*beta/(pow(pi_,3)*varphi), 0., 0.);
                    //U[i] = vector(6*U_inlet*(y*(H-y))/(H*H), 0., 0.);
                }
                
                writeEntry(os, "", U);
                
            #};
        };
    }

    outlet
    {
        type            inletOutlet;
        inletValue      uniform (0 0 0);
        value           uniform (0 0 0);
    }

    fixedWalls
    {
        type            noSlip;
    }


}

// ************************************************************************* //
