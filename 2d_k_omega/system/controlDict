/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include    "$FOAM_CASE/constant/initialConditions"

application     simpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

<<<<<<< HEAD
<<<<<<< HEAD
endTime         1000;
=======
endTime         3000;
>>>>>>> cc37e1a (modifications)
=======
endTime         10;
>>>>>>> 1a53c8a (mod)

deltaT          1;

writeControl    timeStep;

writeInterval   5;

purgeWrite      3;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;


functions
  {
    #includeFunc  residuals;

    //#includeFunc streamlines;

    wallShearStress
    {
        type            wallShearStress;
        functionObjectLibs ("libfieldFunctionObjects.so");
        writeControl    outputTime;
    }

    yPlus
    {
        type            yPlus;
        functionObjectLibs ("libfieldFunctionObjects.so");
        writeControl    outputTime;
    }

    vorticity
    {
        type            vorticity;
        libs            ("libfieldFunctionObjects.so");
        writeControl    outputTime;
    }

    cf
    {
      type    scale;
      libs    ("libfieldFunctionObjects.so");
      writeControl    outputTime;
      field   wallShearStress;
      scale   $factor_adim;
      result  cf;
    }

    cp
    {
      type    scale;
      libs    ("libfieldFunctionObjects.so");
      writeControl    outputTime;
      field   p;
      scale   $factor_adim;
      result  cp;
    }

    nuTurb
    {
      type    scale;
      libs    ("libfieldFunctionObjects.so");
      writeControl    outputTime;
      field   nut;
      scale   1.0;
      result  nuTurb;
      offSet  -1e-06;
    }


    #include "samples"

}

// ************************************************************************* //
